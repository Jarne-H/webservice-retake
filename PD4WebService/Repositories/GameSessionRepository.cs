using Microsoft.EntityFrameworkCore;
using PD4ExamAPI.Models;

namespace PD4ExamAPI.Repositories
{
    public class GameSessionRepository : RepositoryBaseClass
    {

        // GameSessionId, MazeId, PlayerId
        public GameSessionRepository(MazeGameContext context) : base(context)
        {
        }
        //GameSessionId
        public GameSession? GetGameSessionByID(int gameSessionID)
        {
            GameSession gameSession = _context.GameSessions
                .Include(e => e.Maze)
                .Include(e => e.Player)
                .FirstOrDefault(e => e.GameSessionId == gameSessionID);
            return gameSession;
        }
        // MazeId
        public List<GameSession> GetGameSessionsByMazeID(int mazeID)
        {
            List<GameSession> gameSessions = _context.GameSessions
                .Include(e => e.Maze)
                .Include(e => e.Player)
                .Where(e => e.MazeId == mazeID)
                .ToList();
            return gameSessions;
        }
        // PlayerId
        public List<GameSession> GetGameSessionsByPlayerID(int playerID)
        {
            List<GameSession> gameSessions = _context.GameSessions
                .Include(e => e.Maze)
                .Include(e => e.Player)
                .Where(e => e.PlayerId == playerID)
                .ToList();
            return gameSessions;
        }

        //get all game sessions
        public List<GameSession> GetAllGameSessions()
        {
            List<GameSession> gameSessions = _context.GameSessions
                .Include(e => e.Maze)
                .Include(e => e.Player)
                .ToList();
            return gameSessions;
        }

        // Create a new game session
        public void CreateGameSession(int mazeID, int playerID)
        {
            GameSession newGameSession = new GameSession
            {
                //unique GameSessionId will be generated by the database
                GameSessionId = _context.GameSessions.Any() ? _context.GameSessions.Max(gs => gs.GameSessionId) + 1 : 1,
                MazeId = mazeID,
                PlayerId = playerID,
                StartTime = DateTime.Now // Set start time to current time
            };
            _context.Add(newGameSession);
            _context.SaveChanges();
        }

        // Update an existing game session
        public void UpdateGameSession(int gameSessionID, int mazeID, int playerID)
        {
            GameSession gameSessionToUpdate = GetGameSessionByID(gameSessionID);
            if (gameSessionToUpdate != null)
            {
                gameSessionToUpdate.MazeId = mazeID;
                gameSessionToUpdate.PlayerId = playerID;
                gameSessionToUpdate.StartTime = DateTime.UtcNow; // Update start time to current time
                _context.Update(gameSessionToUpdate);
                _context.SaveChanges();
            }
        }

        // Delete a game session
        public void DeleteGameSession(int gameSessionID)
        {
            GameSession gameSessionToDelete = GetGameSessionByID(gameSessionID);

            if (gameSessionToDelete != null)
            {
                _context.Remove(gameSessionToDelete);
                _context.SaveChanges();
            }
        }
    }
}
